datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DIRECT_URL")
  directUrl = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  engineType = "library"
  previewFeatures = ["driverAdapters"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  languageFrom  String?
  languageTo    String?
  level         Level?
  accounts      Account[]
  sessions      Session[]
  hashedPassword String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Word Word[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum LearningProgress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Word {
  id                   String  @unique @id @default(uuid())
  userId               String
  word                 String
  translation          String
  explanation          String
  transcription        String
  languageFrom         String
  languageTo           String
  level                Level
  learningProgress     LearningProgress
  progress             Int
  example1             String
  example2             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SearchCache {
  word                 String   @unique @id
  articles             Json? 
  videos               Json? 
  songs                Json?
  general              Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model WordOfTheDay {
  id                   String @id @default(uuid())
  date                 Int    @unique
  word                 String
}

model ArticleOfTheDay {
  id                   String @id @default(uuid())
  date                 Int    @unique
  title                String
  snippet              String
  link                 String
  image                String?
}